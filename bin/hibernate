#!/usr/bin/env ruby

require 'hibernate'

SUB_COMMANDS = %w[setup rule].freeze
RULE_COMMANDS = %w[create list update remove].freeze

global_opts = Optimist::options do
  version "Hibernate #{Hibernate::VERSION} (c) #{Date.today.year} Manish Sharma"
  banner <<-USAGE
    Automate the shutdown and start of our EC2 instances.

    Usage:
       hibernate <command> [options]

    where <command> are:
       setup        : setup the AWS IAM role and Lambda
       rule         : Manage the schedule for start/stop of EC2 Instance.
        - create    : Create a new rule
        - list      : List existing rules
        - update    : Update an existing rule
        - remove    : Remove an existing rule
    and [options] are:
       these are specific to the <command>. use hibernate <command> --help to learn about [options] for that command.
  USAGE
  stop_on SUB_COMMANDS
end

def parse_options_for_rule(subcmd)
  case subcmd
  when 'create'
    Optimist::options do
      opt :profile, 'Specify the profile name', short: '-p', type: :string
      opt :instance_name, 'Specify the EC2 instance name', short: '-i', type: :string
      opt :start, 'Specify the cron expression to start the instance', short: '-s', type: :string
      opt :stop, 'Specify the cron expression to stop the instance', short: '-e', type: :string
    end
  when 'list'
    Optimist::options do
      opt :profile, 'Specify the profile name', short: '-p', type: :string
      opt :instance_name, 'Specify the EC2 instance name', short: '-i', type: :string
      opt :start, 'List only the start action rules', short: '-s'
      opt :stop, 'List only the stop action rules', short: '-e'
    end
  when 'update'
    Optimist::options do
      opt :profile, 'Specify the profile name', short: '-p', type: :string
      opt :rule, 'Specify the rule name to update', short: '-r', type: :string
      opt :start, 'Specify the cron expression to start the instance', short: '-s', type: :string
      opt :stop, 'Specify the cron expression to stop the instance', short: '-e', type: :string
      opt :state, 'Set rule state to either enable or disable', short: '-a', type: :string, default: nil
    end
  when 'remove'
    Optimist::options do
      opt :profile, 'Specify the profile name', short: '-p', type: :string
      opt :instance_name, 'Specify the EC2 instance name', short: '-i', type: :string
      opt :rule, 'Specify the rule name to remove', short: '-r', type: :string
    end
  else
    Optimist::die "unknown subcommand #{subcmd.inspect}"
  end
end

cmd = ARGV.shift # get the subcommand
options = case cmd
when 'setup'
  Optimist::options do
    opt :profile, 'Specify the profile name', short: '-p', type: :string
  end
when 'rule'
  subcmd = ARGV.shift
  unless RULE_COMMANDS.include?(subcmd)
    Optimist::die "unknown subcommand #{subcmd.inspect}"
  end
  parse_options_for_rule(subcmd)
else
  Optimist::die "unknown command #{cmd.inspect}"
end

puts "Global options: #{global_opts.inspect}"
puts "Subcommand: #{cmd.inspect}"
puts "Subcommand options: #{options.inspect}"
puts "Remaining arguments: #{ARGV.inspect}"

HibernateCli.setup_profile(options[:profile])
case cmd
when 'setup'
  HibernateCli.create_lambda_function
when 'rule'
  HibernateCli.handle_rule_subcommand(subcmd, options)
end
