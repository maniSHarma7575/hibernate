#!/usr/bin/env ruby

require 'optparse'
require_relative '../lib/hibernate/lambda_setup'
require_relative '../lib/hibernate/ec2_manager'

# Define the command-line interface
class HibernateCLI
  def self.run
    command = nil
    options = {}

    # Determine the command from ARGV
    if ARGV.include?('setup')
      command = :setup
      ARGV.delete('setup') # Remove command from ARGV for further processing
    elsif ARGV.include?('node')
      command = :manage_ec2
      ARGV.delete('node') # Remove command from ARGV for further processing
    end

    # Set up the option parser
    parser = OptionParser.new do |parser|
      parser.banner = "Usage: hibernate [command] [options]"

      # Options for managing EC2 instances
      parser.on('--in=<INSTANCE_NAME>', 'Specify the EC2 instance name') do |instance_name|
        options[:instance_name] = instance_name
      end

      parser.on('--start_instance=<START_CRON>', 'Specify the cron expression to start the instance') do |start_cron|
        options[:start_cron] = start_cron
      end

      parser.on('--stop_instance=<STOP_CRON>', 'Specify the cron expression to stop the instance') do |stop_cron|
        options[:stop_cron] = stop_cron
      end
    end

    # Parse the command-line arguments
    begin
      parser.parse!(ARGV)
    rescue OptionParser::ParseError => e
      puts e.message
      puts parser
      exit 1
    end

    # Check for command presence
    if command.nil?
      puts "Please provide a command."
      puts parser
      exit
    end

    # Execute the corresponding command
    case command
    when :setup
      create_lambda_function
    when :manage_ec2
      manage_ec2_command(options)
    end
  end

  def self.create_lambda_function
    puts "I am printed here in setup"
    LambdaSetup.new.run
  end

  def self.manage_ec2_command(options)
    # Validate EC2 management command options
    if options[:instance_name].nil? || options[:start_cron].nil? || options[:stop_cron].nil?
      puts "Please provide the instance name, start cron expression, and stop cron expression."
      puts "Usage: hibernate node --in=<INSTANCE_NAME> --start_instance=<START_CRON> --stop_instance=<STOP_CRON>"
      exit
    else
      puts "I am printed here inside node"
      ec2_manager = EC2Manager.new(options[:instance_name], options[:start_cron], options[:stop_cron])
      ec2_manager.create_event_rule
    end
  end
end

HibernateCLI.run